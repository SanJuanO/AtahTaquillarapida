package com.example.myapplication

import android.app.Dialog
import android.app.ProgressDialog
import android.content.Context
import android.content.DialogInterface
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Color
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Base64
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import com.android.volley.DefaultRetryPolicy
import com.android.volley.Response
import com.android.volley.toolbox.JsonObjectRequest
import com.android.volley.toolbox.Volley
import com.example.myapplication.utilidades.PrintBitmap
import com.example.myapplication.utilidades.Utilidades
import com.google.zxing.BarcodeFormat
import com.google.zxing.EncodeHintType
import com.google.zxing.Writer
import com.google.zxing.common.BitMatrix
import com.google.zxing.oned.Code128Writer
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel
import kotlinx.android.synthetic.main.activity_generar_guia.view.*
import kotlinx.android.synthetic.main.activity_infracciones.*
import kotlinx.android.synthetic.main.activity_reimprimir.*
import net.glxn.qrgen.android.QRCode
import org.json.JSONException
import org.json.JSONObject
import java.io.IOException
import java.io.UnsupportedEncodingException
import java.util.*

class Reimprimir : AppCompatActivity() {
    var pk = ""

    var folio = String()

    var imagenlogo =
        ""

    var LINEA = String()
    var AUTOBUS = String()
    var FECHA = String()
    var ASIENTO = String()
    var TARIFA = String()
    var ORIGEN = String()
    var DESTINO_COMPLETO = String()
    var DESTINO = String()
    var SALIDA = String()
    var PRECIO = String()
    var PASAJERO = String()
    var STATUS = String()
    var FILA = String()
    var COLUMNA = String()
    var VENDEDOR = String()
    var PISO = String()
    var CORTE = String()
    var RUTA = String()
    var CHOFER = String()
    var TIPO = String()
    var FORMADEPAGO = String()
    var PK_CORRIDA_DIA = String()
    var HOST:String=""
    var URL_CANCELAR:String="api/Boletos/Cancelar"


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_reimprimir)
        pk = intent.getStringExtra("pk")

        HOST=getString(R.string.HOST)
        URL_CANCELAR=HOST+URL_CANCELAR

        btnreimprimir.setOnClickListener(View.OnClickListener {

            val txtr = motivotext.text.toString()

            if (Utilidades.bluetoothSocket != null) {
                if (txtr.equals("")) {
                    Toast.makeText(this, "Escribe un motivo de reimpresión", Toast.LENGTH_SHORT)
                        .show()

                } else {

                    guardaDatos()
                }
            }
            else{
                Toast.makeText(this, "Conecta a una impresora", Toast.LENGTH_SHORT)

            }
        })

        btnCancelarBoleto.setOnClickListener(View.OnClickListener {

            val cancelaText = motivoCancelaText.text.toString()


                if (cancelaText.isNullOrEmpty()) {
                    Toast.makeText(this, "Escribe un motivo de cancelaciòn", Toast.LENGTH_SHORT)
                        .show()
                } else {
                    cancelaBoleto()
                }

        })
    }


    fun guardaDatos() {

        val progressDialog = ProgressDialog(
            this,
            R.style.Theme_AppCompat_Light_Dialog
        )
        progressDialog.isIndeterminate = true
        progressDialog.setMessage("Cargando datos...")
        progressDialog.show()
        val motivo = motivotext.text.toString()
        val preferencias = this.getSharedPreferences("variables", Context.MODE_PRIVATE)
        val pku = preferencias.getString("pk", "0")!!
        val datos = JSONObject()
        try {
            datos.put("PK_VENDIDO", pk.toInt())
            datos.put("MOTIVO", motivo)
            datos.put("PK_USUARIO", pku.toInt())

        } catch (e: JSONException) {
            e.printStackTrace()
        }
        val requstQueue = Volley.newRequestQueue(this)
        val jsonObjectRequest: JsonObjectRequest = object : JsonObjectRequest(
            Method.POST, "https://appis.atah.online/api/Boletos/Reimprimir", datos,
            Response.Listener { response ->

                try {

                    progressDialog?.dismiss()
                    val result = response["resultado"] as Int





                    if (result == 1) {
                        val costos = response.getJSONObject("data")



                        FECHA=costos.getString("fecha")
                            LINEA=costos.getString("linea")
                            folio=costos.getString("folio")
                            AUTOBUS=costos.getString("eco")
                            ASIENTO=costos.getString("asiento")
                            PASAJERO=costos.getString("pasajero")
                            ORIGEN=costos.getString("origen")
                            DESTINO=costos.getString("destinoboleto")
                            SALIDA=costos.getString("hora")
                            PRECIO=costos.getString("precio")

                        var org2 = ORIGEN
                        if (org2.length < 15) {
                            for (i in org2.length..15) {
                                org2 = org2 + " "
                            }
                        }

                        var DESTINO2 = DESTINO
                        if (DESTINO.length > 18) {
                            DESTINO2=DESTINO.substring( 0, 17)

                            DESTINO2 = DESTINO2 + "..."

                        }


                        try {
                            val treimpresion  =  "    REIMPRESIÓN DE BOLETO"  + "\n"

                            val texto1 = "FECHA:" + FECHA
                            val tlinea  =  "  LINEA:" + LINEA + "\n"
                            // val texto11 = FECHA+ "  "+LINEA+"\n"
                            val texto2 = "            " + folio+"          "
                            val tautobus= "     AUTOBUS:" + AUTOBUS + "\n"
                            // val texto22 = folio+ "  "+AUTOBUS+"\n"
                            val texto3 = "ASIENTO:" + ASIENTO
                            val tsalida= " SALIDA:" + SALIDA + "\n"

                            //  val texto33 =  ASIENTO+ "  "+PASAJERO+"\n"
                            val texto4 = "ORIGEN:"+org2
                            val textodest="DESTINO:"+"\n"
                            val tdestino= DESTINO2 + "\n"

                            //     val texto5 = "          SALIDA:"+"\n"
                            //   val texto55 = "       "+SALIDA+"\n"


                            val texto6 = "PAGO:EFECTIVO  PRECIO:$" + PRECIO + "\n"
                            // val texto66 =
                            //"EFECTIVO" + "                     " + "#" + PRECIO + ".00"
                            val texto666 =
                                "Presente identificación original y vigenete al momento de abordar.\n"
                            val texto6666 =
                                "Atención a clientes: 01 800 836 0726 \nTterminos y condiciónes www.atah.online\n\n\n"


                            val fuente1 = 1
                            val negrita1 = 1
                            val ancho2 = 1

                            val fuente = 0
                            val negrita = 0
                            val ancho = 0
                            val alto = 0
                            val ANCHO_IMG_58_MM = 384
                            val MODE_PRINT_IMG = 0
                            // Get the bitmap from assets and display into image view
                            // Get the bitmap from assets and display into image view
                            val decodedString =
                                Base64.decode(imagenlogo, Base64.DEFAULT)
                            val bitmap =
                                BitmapFactory.decodeByteArray(decodedString, 0, decodedString.size)

                            Utilidades.outputStream!!.write(
                                PrintBitmap.POS_PrintBMP(
                                    bitmap,
                                    100,
                                    MODE_PRINT_IMG
                                )
                            )


                            // Para que acepte caracteres espciales


                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto1,
                                    negrita,
                                    fuente1,
                                    ancho,
                                    alto
                                )
                            )

                            Utilidades.outputStream!!.write(
                                getByteString(
                                    tlinea,
                                    negrita,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    treimpresion,
                                    negrita1,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )

                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto4,
                                    negrita,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )


                            Utilidades.outputStream!!.write(
                                getByteString(
                                    textodest,
                                    0,
                                    fuente1,
                                    0,
                                    0
                                )
                            )


                            Utilidades.outputStream!!.write(
                                getByteString(
                                    tdestino,
                                    1,
                                    fuente1,
                                    1,
                                    1
                                )
                            )



                            //    outputStream!!.write(getByteString(texto11, negrita1, fuente1, ancho, alto))

                            Utilidades.outputStream!!.write(
                                getByteString(
                                    tautobus,
                                    2,
                                    fuente1,
                                    1,
                                    1
                                )
                            )
                            //  outputStream!!.write(getByteString(texto22, negrita1, fuente1, ancho, alto))
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto3,
                                    negrita,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    tsalida,
                                    2,
                                    fuente1,
                                    1,
                                    1
                                )
                            )
                            // outputStream!!.write(getByteString(texto33, negrita1, fuente1, ancho, alto))


                            //outputStream!!.write(getByteString(texto5, negrita, fuente, ancho, alto))
                            //outputStream!!.write(getByteString(texto55, negrita1, fuente1, ancho2, alto))
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto6,
                                    negrita,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )
//                            outputStream!!.write(
//                                getByteString(
//                                    texto66,
//                                    negrita1,
//                                    fuente1,
//                                    ancho,
//                                    alto
//                                )
//                            )

                            Utilidades.outputStream.write("\n".toByteArray())

//                            val bitmapqr = QRCode.from(folio).withSize(ANCHO_IMG_58_MM ,ANCHO_IMG_58_MM) .bitmap()
//                            outputStream!!.write(
//                                PrintBitmap.POS_PrintBMP(
//                                    bitmapqr,
//                                    295,
//                                    MODE_PRINT_IMG
//                                )
//                            )


                            try {
                                val productId: String = folio
                                val hintMap: Hashtable<EncodeHintType, ErrorCorrectionLevel> =
                                    Hashtable<EncodeHintType, ErrorCorrectionLevel>()
                                hintMap[EncodeHintType.ERROR_CORRECTION] = ErrorCorrectionLevel.L
                                val codeWriter: Writer
                                codeWriter = Code128Writer()
                                val byteMatrix: BitMatrix = codeWriter.encode(
                                    productId,
                                    BarcodeFormat.CODE_128,
                                    400,
                                    100,
                                    hintMap
                                )
                                val width: Int = byteMatrix.getWidth()
                                val height: Int = byteMatrix.getHeight()
                                val bitmap =
                                    Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
                                for (i in 0 until width) {
                                    for (j in 0 until height) {
                                        bitmap.setPixel(
                                            i,
                                            j,
                                            if (byteMatrix.get(i, j)) Color.BLACK else Color.WHITE
                                        )
                                    }
                                }
                                val bitmapqr = bitmap

                                Utilidades.outputStream!!.write(
                                    PrintBitmap.POS_PrintBMP(
                                        bitmapqr,
                                        380,
                                        MODE_PRINT_IMG
                                    )
                                )

                            } catch (e: Exception) {
                                val a = e
                            }
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto2,
                                    negrita,
                                    fuente,
                                    ancho,
                                    alto
                                )
                            )
                            Utilidades.outputStream.write("\n".toByteArray())
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto666,
                                    negrita,
                                    fuente1,
                                    0,
                                    0
                                )
                            )
                            Utilidades.outputStream!!.write(
                                getByteString(
                                    texto6666,
                                    negrita,
                                    fuente1,
                                    0,
                                    0
                                )
                            )

                        } catch (e: IOException) {

                            Toast.makeText(
                                this,
                                "Error al interntar imprimir texto",
                                Toast.LENGTH_SHORT
                            ).show()
                            e.printStackTrace()
                        }

                    } else {
                        val error = response.getString("mensaje")
                        Toast.makeText(this, error, Toast.LENGTH_SHORT).show()

                    }
                } catch (e: JSONException) {
                    e.printStackTrace()
                }
            },
            Response.ErrorListener { error ->
                progressDialog?.dismiss()
                Log.e("Rest Response", error.toString())
            }
        ) { //here I want to post data to sever
        }
        val MY_SOCKET_TIMEOUT_MS = 15000
        val maxRetries = 2
        jsonObjectRequest.retryPolicy = DefaultRetryPolicy(
            MY_SOCKET_TIMEOUT_MS,
            maxRetries,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT
        )
        requstQueue.add(jsonObjectRequest)
    }

    fun cancelaBoleto() {

        val progressDialog = ProgressDialog(
            this,
            R.style.Theme_AppCompat_Light_Dialog
        )
        progressDialog.isIndeterminate = true
        progressDialog.setMessage("Cargando datos...")
        progressDialog.show()
        val motivo = motivoCancelaText.text.toString()
        val preferencias = this.getSharedPreferences("variables", Context.MODE_PRIVATE)
        val VENDEDOR = preferencias.getString("nombre", "")!!+" "+ preferencias.getString("apellidos", "")!!

        val datos = JSONObject()
        try {
            datos.put("PK", pk.toInt())
            datos.put("MOTIVOCANCELADO", motivo)
            datos.put("VENDEDOR", VENDEDOR)

        } catch (e: JSONException) {
            e.printStackTrace()
        }
        val requstQueue = Volley.newRequestQueue(this)
        val jsonObjectRequest: JsonObjectRequest = object : JsonObjectRequest(
            Method.POST, URL_CANCELAR, datos,
            Response.Listener { response ->

                try {

                    progressDialog?.dismiss()
                    val result = response["resultado"] as Int

                    if (result == 1) {

                        Toast.makeText(this, "Boleto cancelado", Toast.LENGTH_SHORT).show()
                        finish()


                    } else {
                        val error = response.getString("mensaje")
                        Toast.makeText(this, error, Toast.LENGTH_SHORT).show()

                    }
                } catch (e: JSONException) {
                    e.printStackTrace()
                }
            },
            Response.ErrorListener { error ->
                progressDialog?.dismiss()
                Log.e("Rest Response", error.toString())
            }
        ) { //here I want to post data to sever
        }
        val MY_SOCKET_TIMEOUT_MS = 15000
        val maxRetries = 2
        jsonObjectRequest.retryPolicy = DefaultRetryPolicy(
            MY_SOCKET_TIMEOUT_MS,
            maxRetries,
            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT
        )
        requstQueue.add(jsonObjectRequest)
    }



    fun getByteString(
        str: String,
        bold: Int,
        font: Int,
        widthsize: Int,
        heigthsize: Int
    ): ByteArray? {
        if ((str.length == 0) or (widthsize < 0) or (widthsize > 3) or (heigthsize < 0) or (heigthsize > 3
                    ) or (font < 0) or (font > 1)
        ) return null
        var strData: ByteArray? = null
        strData = try {
            str.toByteArray(charset("iso-8859-1"))
        } catch (e: UnsupportedEncodingException) {
            e.printStackTrace()
            return null
        }
        val command = ByteArray(strData.size + 9)
        val intToWidth = byteArrayOf(0x00, 0x10, 0x20, 0x30) //
        val intToHeight = byteArrayOf(0x00, 0x01, 0x02, 0x03) //
        command[0] = 27 // caracter ESC para darle comandos a la impresora
        command[1] = 69
        command[2] = bold.toByte()
        command[3] = 27
        command[4] = 77
        command[5] = font.toByte()
        command[6] = 29
        command[7] = 33
        command[8] = (intToWidth[widthsize] + intToHeight[heigthsize]).toByte()
        System.arraycopy(strData, 0, command, 9, strData.size)
        return command
    }
}
